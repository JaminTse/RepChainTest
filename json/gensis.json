{
  "version" : 1,
  "height" : "1",
  "transactions" : [ {
    "id" : "da78622c-27d5-4633-b32a-3fa81e2b48e7",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "package rep.sc.tpl\n\nimport rep.protos.peer._\nimport org.json4s.jackson.JsonMethods._\n\nimport scala.collection.mutable.Map\nimport org.json4s.DefaultFormats\nimport rep.app.conf.SystemProfile\nimport rep.utils.{IdTool, SerializeUtils}\nimport rep.sc.scalax.IContract\nimport rep.sc.scalax.ContractContext\nimport rep.protos.peer.ActionResult\n\n/**\n  * @author zyf\n  */\n// 证书状态\ncase class CertStatus(credit_code: String, name: String, status: Boolean)\ncase class CertInfo(credit_code: String,name: String, cert: Certificate)\n\nclass ContractCert  extends IContract {\n  implicit val formats = DefaultFormats\n\n  val notNodeCert = \"非管理员操作\"\n  val signerExists = \"账户已存在\"\n  val signerNotExists = \"账户不存在\"\n  val certExists = \"证书已存在\"\n  val certNotExists = \"证书不存在\"\n  val unknownError = \"未知错误\"\n  val chaincodeName = SystemProfile.getAccountChaincodeName\n  val chaincodeVersion = SystemProfile.getAccountChaincodeVersion\n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\n  val underline = \"_\"\n  val dot = \".\"\n  // 锚点，错误回退\n  var anchor: Map[String, Any] = Map()\n\n  object ACTION {\n    val SignUpSigner = \"SignUpSigner\"\n    val SignUpCert = \"SignUpCert\"\n    val UpdateCertStatus = \"UpdateCertStatus\"\n    val UpdateSigner = \"UpdateSigner\"\n  }\n\n  \n\n  /**\n    * 注册Signer账户\n    * @param ctx\n    * @param data\n    * @return\n    */\n  def signUpSigner(ctx: ContractContext, data:Signer):ActionResult = {\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\n    if (!isNodeCert) {\n      return ActionResult(0,notNodeCert)\n    }\n    // 存Signer账户\n    //val signerKey = prefix + underline + data.creditCode\n    val signer = ctx.api.getState(data.creditCode)\n    // 如果是null，表示已注销，如果不是null，则判断是否有值\n    if (signer == null ){\n      ctx.api.setVal(data.creditCode, data)\n      ActionResult(1)\n    } else {\n      ActionResult(0,signerExists)\n    }\n  }\n\n  /**\n    * 注册用户证书：1、将name加到账户中；2、将Certificate保存\n    * @param ctx\n    * @param data\n    * @return\n    */\n  def signUpCert(ctx: ContractContext, data:CertInfo): ActionResult = {\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\n    if (!isNodeCert) {\n      return ActionResult(0,notNodeCert)\n    }\n    val certKey =  data.credit_code + dot + data.name\n    val certInfo = ctx.api.getState(certKey)\n    val signerKey =  data.credit_code\n    val signerContent = ctx.api.getState(signerKey)\n    // 先判断证书，若证书不存在，则向账户添加name\n    if (certInfo == null) {\n      if (signerContent == null){\n        return ActionResult(0,signerNotExists)\n      } else {\n        ctx.api.setVal(certKey, data.cert)\n        val signer = SerializeUtils.deserialise(signerContent).asInstanceOf[Signer]\n        if (!signer.certNames.contains(data.name)){\n          signer.addCertNames(data.name)\n          ctx.api.setVal(signerKey, signer)\n        }\n      }\n      ActionResult(1)\n    } else {\n      ActionResult(0, certExists)\n    }\n  }\n\n  // TODO\n  def rollback(map: Map[String, Byte]): Unit = {}\n\n  /**\n    * 用户证书禁用、启用\n    * @param ctx\n    * @param data\n    * @return\n    */\n  def updateCertStatus(ctx: ContractContext, data: CertStatus): ActionResult = {\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\n    if (!isNodeCert) {\n      return ActionResult(0,notNodeCert)\n    }\n    val certKey =  data.credit_code + dot + data.name\n    val certInfo = ctx.api.getState(certKey)\n    if (certInfo == null) {\n      ActionResult(0,certNotExists)\n    } else {\n      val cert = SerializeUtils.deserialise(certInfo).asInstanceOf[Certificate]\n      cert.withCertValid(data.status)\n      ctx.api.setVal(certKey, cert)\n      ActionResult(1)\n    }\n  }\n\n  /**\n    * 更新账户相关信息\n    * @param ctx\n    * @param data\n    * @return\n    */\n  def updateSigner(ctx: ContractContext, data: Signer): ActionResult = {\n    val isNodeCert = ctx.api.bNodeCreditCode(ctx.t.getSignature.getCertId.creditCode)\n    if (!isNodeCert) {\n      return ActionResult(0,notNodeCert)\n    }\n    val signer = ctx.api.getState(data.creditCode)\n    // 如果是null，账户不存在，不存在则不能更新\n    if (signer == null){\n      ActionResult(0,signerNotExists)\n    } else {\n      ctx.api.setVal(data.creditCode, data)\n      ActionResult(1)\n    }\n  }\n\n  def init(ctx: ContractContext){\n    println(s\"tid: $ctx.t.id\")\n  }\n\n\n  /**\n    * 合约方法入口\n    */\n  def onAction(ctx: ContractContext,action:String, sdata:String ): ActionResult={\n    val json = parse(sdata)\n\n    action match {\n      case ACTION.SignUpSigner =>\n        println(\"SignUpSigner\")\n        signUpSigner(ctx, json.extract[Signer])\n      case ACTION.SignUpCert =>\n        println(\"SignUpCert\")\n        signUpCert(ctx, json.extract[CertInfo])\n      case ACTION.UpdateCertStatus =>\n        println(\"UpdateCertStatus\")\n        updateCertStatus(ctx, json.extract[CertStatus])\n      case ACTION.UpdateSigner =>\n        println(\"UpdateSigner\")\n        updateSigner(ctx, json.extract[Signer])\n    }\n  }\n\n}",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.243Z",
      "signature" : "MEUCIHSFexiQHmh8Hj1y8skxgBdq+txBiERAxcVuaSZMkK6IAiEAgW2NtLr8bjIBmnKpRnOFsfv7/dFcaEOvIVbc59vvN/M="
    }
  }, {
    "id" : "4dc81a77-fb26-4d7b-be6b-66415c99e74d",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node1\",\"creditCode\":\"121000005l35120456\",\"mobile\":\"18912345678\",\"certNames\":[\"node1\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.431Z",
      "signature" : "MEUCID/fRdQO70Kf++UhpEdhoOnR+OvOrWYICV8ucBWOxsXGAiEAnZdvEFVSZIFFlDDwyjIIZLLL4A0/GV3z5l9TdMnp8Tk="
    }
  }, {
    "id" : "0356e9cf-416a-4052-9118-581a0720804f",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node2\",\"creditCode\":\"12110107bi45jh675g\",\"mobile\":\"18912345678\",\"certNames\":[\"node2\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.438Z",
      "signature" : "MEUCIAoouvPY8NuMLlnaYTaXhKkP0hr+tVLbNY6hsl3oYLk2AiEAidxJ1hE0uYfERc4D/VPpdFHsiNY8mL5j1JdlQt73Loo="
    }
  }, {
    "id" : "b37ce137-9001-445b-8088-dd2a8a6bb0f3",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node3\",\"creditCode\":\"122000002n00123567\",\"mobile\":\"18912345678\",\"certNames\":[\"node3\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.440Z",
      "signature" : "MEQCICeiLykp5o9Pbhg179EvTYS9A9oLYw4cqDcX9/MpalK+AiBXL4Sn5t4Jlx11fw6N8zAVqZsOMsLw/xm6X1N8SkxEWA=="
    }
  }, {
    "id" : "e2bb2251-43b5-4772-b7e6-e743dba42f98",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node4\",\"creditCode\":\"921000005k36123789\",\"mobile\":\"18912345678\",\"certNames\":[\"node4\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.442Z",
      "signature" : "MEQCIG2ZQzZqU9RLbiND5QojDIzZz+4BjMPyV+rLJCqdJCUYAiBM5OYIVUp7LuEFJRz4BvlBKISeedvrl8d7DmAe7Zeduw=="
    }
  }, {
    "id" : "69720e39-4b5a-4bc2-98b6-e7e0d4d5a744",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"node5\",\"creditCode\":\"921000006e0012v696\",\"mobile\":\"18912345678\",\"certNames\":[\"node5\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.444Z",
      "signature" : "MEQCICCzZLjOGXfN7dxoISTkRS3OF0dCMAyvMru7ubWYDedHAiBz1XeEqPtyadaUT4Di7Cv8tufJqYOhtVhTYzWz45k60A=="
    }
  }, {
    "id" : "e7b1ad56-7bd3-4fb5-a100-6eaad037afaa",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpSigner",
      "args" : [ "{\"name\":\"super_admin\",\"creditCode\":\"951002007l78123233\",\"mobile\":\"18912345678\",\"certNames\":[\"super_admin\"]}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.445Z",
      "signature" : "MEUCIDleixOTizCL8LrqPmKRppjTCwC+5Or3E0fES72hg+z7AiEAjAxpVPqNN98PR7xYcAJ/I3X/4SPAjm6NwQFXNKUhre0="
    }
  }, {
    "id" : "6fe41c00-b17d-4a87-8f08-b765c51572ab",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"121000005l35120456\",\"name\":\"node1\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBmjCCAT+gAwIBAgIEXIn07TAKBggqhkjOPQQDAjBWMQswCQYDVQQGEwJjbjEL\\nMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJqMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwG\\nA1UECwwFaXNjYXMxCjAIBgNVBAMMATEwHhcNMTkwMzE0MDYzMDA1WhcNMjAwMzEz\\nMDYzMDA1WjBWMQswCQYDVQQGEwJjbjELMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJq\\nMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwGA1UECwwFaXNjYXMxCjAIBgNVBAMMATEw\\nVjAQBgcqhkjOPQIBBgUrgQQACgNCAASlh+oDBPdwHEkpQT4/g4RX9ubP7jMM2Qod\\niFtsnv+ObQ3dxfQN/S515ePssn3HjPCwfzR3S1KY4O9vFtH1Jql9MAoGCCqGSM49\\nBAMCA0kAMEYCIQCG2NFkYx06oWahUDflmXDkoXyTBIvjnA/M2yJlou3RIQIhAJcA\\n1X1djf5oGPc+6GYh9g4YhQ59HxV3p6kAEuRI13PP\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1555074439,\"nanos\":448000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.468Z",
      "signature" : "MEUCIEPB1M9OHekKzqk9h0yyw9yuX41VyrEATBafI7m0RHx0AiEA4tX0P7xEZ4GfXGNOnPzKNWDVVkxDBrczSkaWzx8v088="
    }
  }, {
    "id" : "62460ddf-40d1-446a-803a-3c45d6031484",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"12110107bi45jh675g\",\"name\":\"node2\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBmTCCAT+gAwIBAgIEXIn2LzAKBggqhkjOPQQDAjBWMQswCQYDVQQGEwJjbjEL\\nMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJqMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwG\\nA1UECwwFaXNjYXMxCjAIBgNVBAMMATIwHhcNMTkwMzE0MDYzNTI3WhcNMjAwMzEz\\nMDYzNTI3WjBWMQswCQYDVQQGEwJjbjELMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJq\\nMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwGA1UECwwFaXNjYXMxCjAIBgNVBAMMATIw\\nVjAQBgcqhkjOPQIBBgUrgQQACgNCAAQbGHprzZj8UABd4LFvAoFVPFc/xDkWybEJ\\noF3iey/BvIVvBrB92xskV8ULlOt+qjQGIz0SdRiCrqs+YacCAo/xMAoGCCqGSM49\\nBAMCA0gAMEUCIDdarnwrREWGu3YQMvcFItU3e5X9J7kwgVw3uvZg77r0AiEAgIhG\\nTTVwdvjjewyeOXoVT/emsGz314jZJTYbtzoZiv8=\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1555074439,\"nanos\":469000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.470Z",
      "signature" : "MEQCIBaRKO8wub6vQRoViYVHuEMOa9dGT9zmkOlEkWtr/MhwAiAujpDwwytCVwj4fMGJt9/L865wsK8BbJa7GFVpzVyAbQ=="
    }
  }, {
    "id" : "b43256d9-4585-4f5d-9b86-443500b8ab3e",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"122000002n00123567\",\"name\":\"node3\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBmTCCAT+gAwIBAgIEXIn6vTAKBggqhkjOPQQDAjBWMQswCQYDVQQGEwJjbjEL\\nMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJqMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwG\\nA1UECwwFaXNjYXMxCjAIBgNVBAMMATMwHhcNMTkwMzE0MDY1NDUzWhcNMjAwMzEz\\nMDY1NDUzWjBWMQswCQYDVQQGEwJjbjELMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJq\\nMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwGA1UECwwFaXNjYXMxCjAIBgNVBAMMATMw\\nVjAQBgcqhkjOPQIBBgUrgQQACgNCAASdBDKlL7mW1NEfYDDb63d6O3/MueUT0Czr\\nbzcmLhrDvRyIO2fHl/zR/qrNy76cuRi7EednNO/G7qTemnJQqC9oMAoGCCqGSM49\\nBAMCA0gAMEUCIEXfvQcCZsnBiCWEPV0gWmxnhBbRRXE9oirBwb4J0Tu+AiEAk7Z8\\n3MRWR022p7AYeshwIXpaDlIu3N4VxatMHh3rs5I=\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1555074439,\"nanos\":472000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.473Z",
      "signature" : "MEUCIGwO7RdsX0ftDxLL3Kit4H6dlHE+4TsYxnzQqT+RV5lOAiEAmAg+PqqH0uSTrOGRvufYGjyDV9R4TxFcwQzKicOx2mY="
    }
  }, {
    "id" : "856b451d-ffe7-4f5c-bfbb-a36e70763886",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"921000005k36123789\",\"name\":\"node4\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBmjCCAT+gAwIBAgIEXIn75TAKBggqhkjOPQQDAjBWMQswCQYDVQQGEwJjbjEL\\nMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJqMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwG\\nA1UECwwFaXNjYXMxCjAIBgNVBAMMATQwHhcNMTkwMzE0MDY1OTQ5WhcNMjAwMzEz\\nMDY1OTQ5WjBWMQswCQYDVQQGEwJjbjELMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJq\\nMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwGA1UECwwFaXNjYXMxCjAIBgNVBAMMATQw\\nVjAQBgcqhkjOPQIBBgUrgQQACgNCAAQy8jrMgX4TF/iuA42wEpYr82qIzBVFZmoJ\\ndyQTu2Pu5Ot4Jfg1sa/ibY4fxXX/Rc2bN8U0+88A7JiEqa0pRAQUMAoGCCqGSM49\\nBAMCA0kAMEYCIQDLBrE3v62ztcucfxZ27M0JqcgKWKT1Cow3JyCLZnhAQwIhANaQ\\nIv1SgKX7fnhR3lga4IKdaFK6bpW/9YnDUsQ22kFL\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1555074439,\"nanos\":475000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.476Z",
      "signature" : "MEUCIAwgmhQHUqSrUevQKKi+SJ0X2XZ17vqgUFeQmW3BruJ2AiEAtCwCmL/NOT6SXHhoeznJldbV26xMxx4xNueXsEyvUWw="
    }
  }, {
    "id" : "37cf5d92-5f6d-44b8-b8a3-51972c018c79",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"921000006e0012v696\",\"name\":\"node5\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBmTCCAT+gAwIBAgIEXIn8QzAKBggqhkjOPQQDAjBWMQswCQYDVQQGEwJjbjEL\\nMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJqMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwG\\nA1UECwwFaXNjYXMxCjAIBgNVBAMMATUwHhcNMTkwMzE0MDcwMTIzWhcNMjAwMzEz\\nMDcwMTIzWjBWMQswCQYDVQQGEwJjbjELMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJq\\nMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwGA1UECwwFaXNjYXMxCjAIBgNVBAMMATUw\\nVjAQBgcqhkjOPQIBBgUrgQQACgNCAASRkmXqNawcVmoRYCRbxxuGMEhBkNi7mB6E\\nTHeC+CzOw/G7spOXst4AEEcZwNwnu4yBsTI61O59+wWWoVzJMCfHMAoGCCqGSM49\\nBAMCA0gAMEUCIDUg9XvYS5gYplD2XpQIs2yYyG9yC3CYDVU3oHEbAhmgAiEA0857\\njWV0BsnABl2+s/P/WYEuZWixQuO2YNGpwVG/u7g=\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1555074439,\"nanos\":478000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.479Z",
      "signature" : "MEYCIQDpcTU4AQsz0u4uMFLC+udzYdJ/eVfBwBAg1wbMa7FNNQIhAINVS86w7wFom2ArwYrCbtUjSZHjtTcg/Q4JByg+1ws+"
    }
  }, {
    "id" : "ff77b857-cbd6-46fe-86e9-3eab414feb46",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractCert",
      "version" : 1
    },
    "ipt" : {
      "function" : "SignUpCert",
      "args" : [ "{\"credit_code\":\"951002007l78123233\",\"name\":\"super_admin\",\"cert\":{\"certificate\":\"-----BEGIN CERTIFICATE-----\\nMIIBrjCCAVOgAwIBAgIEXIn9HTAKBggqhkjOPQQDAjBgMQswCQYDVQQGEwJjbjEL\\nMAkGA1UECAwCYmoxCzAJBgNVBAcMAmJqMREwDwYDVQQKDAhyZXBjaGFpbjEOMAwG\\nA1UECwwFaXNjYXMxFDASBgNVBAMMC3N1cGVyX2FkbWluMB4XDTE5MDMxNDA3MDUw\\nMVoXDTIwMDMxMzA3MDUwMVowYDELMAkGA1UEBhMCY24xCzAJBgNVBAgMAmJqMQsw\\nCQYDVQQHDAJiajERMA8GA1UECgwIcmVwY2hhaW4xDjAMBgNVBAsMBWlzY2FzMRQw\\nEgYDVQQDDAtzdXBlcl9hZG1pbjBWMBAGByqGSM49AgEGBSuBBAAKA0IABBLsxfk6\\nB86BFI3ij2YJylNGzxXNRQb45mZPNfVAkQf0hImHJMP+EgCK7UfJqa1U970ZslSC\\nVTDxNyrb5wfLOIMwCgYIKoZIzj0EAwIDSQAwRgIhANUOIZN0YmYxbtmUlJeMaeEe\\nb2STEd2Z07l1WBUN+mN9AiEAqKXR2Z/F+t0lWELgO4I+fxHiw+GIBYYLlsRVy4zZ\\nvvU=\\n-----END CERTIFICATE-----\\n\",\"algType\":\"SHA1withECDSA\",\"certValid\":true,\"regTime\":{\"seconds\":1555074439,\"nanos\":482000000}}}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.483Z",
      "signature" : "MEUCIQC3eLfJ36btj5zNsDNBEsKPaHVBbq9U8w+rNB/cz12cKgIgS0K4UMG11U5WuZGW2nutaD0rXy00CavSGnSPiRP9mug="
    }
  }, {
    "id" : "960d5233-d5e3-44c5-a4fe-56cbbe56b6b7",
    "type" : "CHAINCODE_DEPLOY",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "spec" : {
      "timeout" : 5000,
      "codePackage" : "\n/*\n * Copyright  2018 Blockchain Technology and Application Joint Lab, Linkel Technology Co., Ltd, Beijing, Fintech Research Center of ISCAS.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BA SIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage rep.sc.tpl\n\nimport org.json4s._\nimport org.json4s.jackson.JsonMethods._\nimport rep.app.conf.SystemProfile\nimport rep.protos.peer.ChaincodeId\nimport rep.utils.IdTool\nimport rep.sc.scalax.IContract\n\nimport rep.sc.scalax.ContractContext\nimport rep.protos.peer.ActionResult\n\n/**\n * 资产管理合约\n */\n\ncase class Transfer(from:String, to:String, amount:Int)\n\nclass ContractAssetsTPL extends IContract{\n\n  // 需要跨合约读账户\n  val chaincodeName = SystemProfile.getAccountChaincodeName\n  val chaincodeVersion = SystemProfile.getAccountChaincodeVersion \n  //val prefix = IdTool.getCid(ChaincodeId(chaincodeName, chaincodeVersion))\n\n  implicit val formats = DefaultFormats\n  \n    def init(ctx: ContractContext){      \n      println(s\"tid: $ctx.t.id\")\n    }\n    \n    def set(ctx: ContractContext, data:Map[String,Int]) :ActionResult={\n      println(s\"set data:$data\")\n      for((k,v)<-data){\n        ctx.api.setVal(k, v)\n      }\n      new ActionResult(1)\n    }\n    \n    def transfer(ctx: ContractContext, data:Transfer) :ActionResult={\n      if(!data.from.equals(ctx.t.getSignature.getCertId.creditCode))\n        return new ActionResult(-1, \"只允许从本人账户转出\")      \n      val signerKey =  data.to\n      // 跨合约读账户，该处并未反序列化\n      if(ctx.api.getStateEx(chaincodeName,data.to)==null)\n        return new ActionResult(-2, \"目标账户不存在\")\n      val sfrom =  ctx.api.getVal(data.from)\n      var dfrom =sfrom.asInstanceOf[Int]\n      if(dfrom < data.amount)\n        return new ActionResult(-3, \"余额不足\")\n      var dto = ctx.api.getVal(data.to).toString.toInt\n      ctx.api.setVal(data.from,dfrom - data.amount)\n      ctx.api.setVal(data.to,dto + data.amount)\n       new ActionResult(1)\n    }\n    /**\n     * 根据action,找到对应的method，并将传入的json字符串parse为method需要的传入参数\n     */\n    def onAction(ctx: ContractContext,action:String, sdata:String ):ActionResult={\n      val json = parse(sdata)      \n      action match {\n        case \"transfer\" => \n          transfer(ctx,json.extract[Transfer])\n        case \"set\" => \n          set(ctx, json.extract[Map[String,Int]])\n      }\n    }\n    \n}\n",
      "ctype" : "CODE_SCALA"
    },
    "signature" : {
      "certId" : {
        "creditCode" : "121000005l35120456",
        "certName" : "node1"
      },
      "tmLocal" : "2019-04-12T21:07:19.485Z",
      "signature" : "MEYCIQD8/IWU8KIMUBiYyAJ1ET7rFkMkWi6tRW5twEdlC0PBEgIhAKHI0QEhueN3vLfRcBbcuhKzc18yQuAhB1rB4+Ek251I"
    }
  }, {
    "id" : "53eb2534-ad8e-4ea9-bc11-ac229a5d56d9",
    "type" : "CHAINCODE_INVOKE",
    "cid" : {
      "chaincodeName" : "ContractAssetsTPL",
      "version" : 1
    },
    "ipt" : {
      "function" : "set",
      "args" : [ "{\r\n  \"121000005l35120456\" : 10000000,\r\n  \"12110107bi45jh675g\" : 10000000,\r\n  \"122000002n00123567\" : 10000000,\r\n  \"921000005k36123789\" : 10000000,\r\n  \"921000006e0012v696\" : 10000000\r\n}" ]
    },
    "signature" : {
      "certId" : {
        "creditCode" : "951002007l78123233",
        "certName" : "super_admin"
      },
      "tmLocal" : "2019-04-12T21:07:19.487Z",
      "signature" : "MEYCIQDH7CqAjAQLBtycYYrmnQ3OwbBBDxCivT4Mpeo/tUEP+QIhAJpwlT3f1VgXi3FLbQJbw3aaRRqPITjiK+YXWk2U6SLK"
    }
  } ],
  "endorsements" : [ {
    "certId" : {
      "creditCode" : "951002007l78123233",
      "certName" : "super_admin"
    },
    "tmLocal" : "2019-04-12T21:07:19.635Z",
    "signature" : "MEUCIBp4Y9c+16vZFyIpxBLRv6yKpeqbkMXNhoq2O6qqf4L0AiEArNANNwirIs3zwyXAGiXRPzkqP0Atl+SdHW6/uVPaxO0="
  }, {
    "certId" : {
      "creditCode" : "121000005l35120456",
      "certName" : "node1"
    },
    "tmLocal" : "2019-04-12T21:07:19.637Z",
    "signature" : "MEUCIQCCUXm3OYBEA7emhkHISQoVUJCzErzWdFEAeKaOekIORwIgW/F1mt2BDpJXT2pHYf4Ld4inRj3S726En6jJ7GaLagQ="
  } ]
}
