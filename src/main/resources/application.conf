akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  # Options: ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  cluster {
    akka.cluster.log-info = on
    log-info-verbose = on
    #jmx.enabled = on
    #jmx.multi-mbeans-in-same-jvm = on
    #min-nr-of-members = 4
  }
  actor {
    serialize-messages = off
    serialize-creators = off
    enable-additional-serialization-bindings = on
    allow-java-serialization = off
    #provider = "akka.cluster.ClusterActorRefProvider"
    provider = "cluster"
    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "java.lang.String" = java
      "java.io.Serializable" = kryo
      "com.google.protobuf.Message" = proto
      "scalapb.GeneratedMessage" = proto
    }
  }


  remote {
    classic {
      netty.tcp {
        transport-class = "akka.remote.transport.netty.NettyTransport"
        #mesage传输块大小配置
        send-buffer-size = 2048000b
        receive-buffer-size = 2048000b
        maximum-frame-size = 1024000b
        enable-ssl = true
        ssl-engine-provider = akka.remote.transport.netty.ConfigSSLEngineProvider
        security {
          key-store = "jks/121000005l35120456.node1.jks"
          trust-store = "jks/mytruststore.jks"   // 加载信任列表证书用的_tls1.3
          #trust-store = "jks/mytrust"    // ssl用的_ca
          trust-store-mm = "jks/mytruststore.jks"   // 加载信任列表证书用的_origin

          key-store-password = "123"
          key-password = "123"
          trust-store-password = "changeme"      // 加载信任列表证书用的_tls1.3
          #trust-store-password = "changeit"    // ssl用的_ca
          trust-store-password-mm = "changeme"   // 加载信任列表证书用的_origin

          protocol = "TLSv1.3"
          enabled-algorithms = [TLS_AES_128_GCM_SHA256]
          require-mutual-authentication = on
          random-number-generator = "SecureRandom"
        }
      }
      netty.ssl.security {
        key-store = "jks/121000005l35120456.node1.jks"
        trust-store = "jks/mytruststore.jks"   // 加载信任列表证书用的_tls1.3
        #trust-store = "jks/mytrust"    // ssl用的_ca
        trust-store-mm = "jks/mytruststore.jks"   // 加载信任列表证书用的_origin

        key-store-password = "123"
        key-password = "123"
        trust-store-password = "changeme"      // 加载信任列表证书用的_tls1.3
        #trust-store-password = "changeit"    // ssl用的_ca
        trust-store-password-mm = "changeme"   // 加载信任列表证书用的_origin

        protocol = "TLSv1.3"
        enabled-algorithms = [TLS_AES_128_GCM_SHA256]
        require-mutual-authentication = on
        random-number-generator = "SecureRandom"
      }
    }

    artery {

      # Disable artery with this flag
      enabled = on

      # Select the underlying transport implementation.
      # Possible values: aeron-udp, tcp, tls-tcp
      transport = tls-tcp
      #log-received-messages = on
      #log-sent-messages = on
      advanced {

        # Maximum serialized message size, including header data.
        maximum-frame-size = 1024 KiB

        # Direct byte buffers are reused in a pool with this maximum size.
        # Each buffer has the size of 'maximum-frame-size'.
        # This is not a hard upper limit on number of created buffers. Additional
        # buffers will be created if needed, e.g. when using many outbound
        # associations at the same time. Such additional buffers will be garbage
        # collected, which is not as efficient as reusing buffers in the pool.
        buffer-pool-size = 512

        # Maximum serialized message size for the large messages, including header data.
        # It is currently restricted to 1/8th the size of a term buffer that can be
        # configured by setting the 'aeron.term.buffer.length' system property.
        # See 'large-message-destinations'.
        maximum-large-frame-size = 4 MiB

        # Direct byte buffers for the large messages are reused in a pool with this maximum size.
        # Each buffer has the size of 'maximum-large-frame-size'.
        # See 'large-message-destinations'.
        # This is not a hard upper limit on number of created buffers. Additional
        # buffers will be created if needed, e.g. when using many outbound
        # associations at the same time. Such additional buffers will be garbage
        # collected, which is not as efficient as reusing buffers in the pool.
        large-buffer-pool-size = 64

        outbound-message-queue-size = 30720

        #inbound-lanes = 1


        #outbound-lanes = 1


      }

      # SSL configuration that is used when transport=tls-tcp.
      ssl {
        # Factory of SSLEngine.
        # Must implement akka.remote.artery.tcp.SSLEngineProvider and have a public
        # constructor with an ActorSystem parameter.
        # The default ConfigSSLEngineProvider is configured by properties in section
        # akka.remote.artery.ssl.config-ssl-engine

        ssl-engine-provider = akka.remote.artery.tcp.ConfigSSLEngineProvider

        # Config of akka.remote.artery.tcp.ConfigSSLEngineProvider
        config-ssl-engine {
          base-path = "jks/"
          key-store = "jks/121000005l35120456.node1.jks"
          trust-store = "jks/mytruststore.jks"   // 加载信任列表证书用的_tls1.3
          #trust-store = "jks/mytrust"    // ssl用的_ca
          trust-store-mm = "jks/mytruststore.jks"   // 加载信任列表证书用的_origin

          key-store-password = "123"
          key-password = "123"
          trust-store-password = "changeme"      // 加载信任列表证书用的_tls1.3
          #trust-store-password = "changeit"    // ssl用的_ca
          trust-store-password-mm = "changeme"   // 加载信任列表证书用的_origin

          protocol = "TLSv1.2"
          #enabled-algorithms = [TLS_AES_128_GCM_SHA256]
          enabled-algorithms = [TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256]
          #require-mutual-authentication = on
          random-number-generator = "SecureRandom"

          # Require mutual authentication between TLS peers
          #
          # Without mutual authentication only the peer that actively establishes a connection (TLS client side)
          # checks if the passive side (TLS server side) sends over a trusted certificate. With the flag turned on,
          # the passive side will also request and verify a certificate from the connecting peer.
          #
          # To prevent man-in-the-middle attacks this setting is enabled by default.
          require-mutual-authentication = on

          # Set this to `on` to verify hostnames with sun.security.util.HostnameChecker
          hostname-verification = off
        }
      }
    }
  }


  //创世块
  genesisblock {
    creationBlockTime = 1495451252086
  }

}
system {
  #创世节点的名称，在系统初始化时，将根据该节点是否是创世节点进行创世块的建立
  genesis_node_name = "121000005l35120456.node1"
  #api是否开启
  #如果是单机多节点测试模式（Repchain，则选择0，默认节点1会开启）
  ws_enable = 1#api 0,不开启;1,开启
  #交易生产方式
  trans_create_type = 1 #0,手动;1,自动
  #是否进行TPS测试
  statistic_enable = 1 # 0,unable;able
  #实时图的事件是否发送，如果不发送，前端实时图将收不到任何消息。
  realtimegraph_enable = 1#0 unable;1 enable; default 1

  httpServicePort = 8081#http服务的端口号，默认为8081

  checkCertValidate = 0#设置是否检查证书的有效性，默认为0  0=不校验，1=校验

  contractOperationMode = 0#设置合约的运行方式，0=debug方式，1=deploy，默认为debug方式，如果发布部署，必须使用deploy方式。

  number_of_transProcessor = 10#

  has_preload_trans_of_api = false#API接收交易时，是否做交易的预执行检查。默认值true

  is_verify_of_endorsement = false#在出块时，背书节点是否验证交易，默认值true

  number_of_endorsement = 2#该参数确认背书比例，可选值：1，2，3；如果等于1， 表示有一个出块签名就可以了；如果等于2，表示达成共识需要大于节点的1/2；如果等于3，表示达成共识需要大于节点的2/3；默认值是2.

  is_persistence_tx_to_db = 1 #0,不持久化缓存交易到数据库;1,持久化缓存交易到数据库

  transaction_validator{
    is_use_validator = true #默认值false 不使用专门的交易验签的验证器
    validator_addr = ["akka://Repchain@127.0.0.1:22526","akka://Repchain@127.0.0.1:22525"] #默认值为空，如果有：akka://Repchain@127.0.0.1:22526
  }

  confirm_block{
    is_forwarding = true#默认值false 直接广播给所有节点
    forwarding_nodes = ["akka://Repchain@127.0.0.1:22526"]#本节点广播数据给哪些节点
  }

  block {
    #块内交易的最大数量
    trans_num_limit = 1000
    #块内交易标准最小数量
    trans_num_min = 1
    #交易数量不足，重试次数
    retry_time = 10
    #区块的最大长度，不能大于传输的消息的最大长度，单位是字节
    block_length = 240000
  }

  vote {
    #最低投票人数量
    vote_node_min = 4
    #参与共识的节点别名
    vote_node_list = ["121000005l35120456.node1", "12110107bi45jh675g.node2",
      "122000002n00123567.node3", "921000005k36123789.node4"
      ]
      #, "921000006e0012v696.node5"]
  }
  account {
    chaincodename = "ContractCert"#账户管理合约的名称
    chaincodeversion = 1
    #证书状态改变函数名
    CertStatusChangeFunction = "UpdateCertStatus"
  }

  diskspaceManager {
    diskspacealarm = 5000#磁盘最少空间大小，单位M ，小于这个值系统将不能启动。
  }

  transaction {
    #辅助自动创建交易的间隔
    tran_create_dur = 5 #millis
    #最大交易缓存量
    max_cache_num = 100000
  }

  cluster {
    #节点入网稳定时间
    node_stable_delay = 5000 #millis
  }

  storage {
    dbpath = "/Users/jiangbuyun/repchaindata/data/leveldbdata"
    blockpath = "/Users/jiangbuyun/repchaindata/data/blockdata"
    filemax = 200000000#单位为字节
  }

   output_alert{
     is_output_alert = false
     core_threads = 2
     max_threads = 4
     alive_time = 10 //unit second
     prisma_url = "http://192.168.2.112:4467"
   }

  time {
    #通用稳定延迟
    stable_time_dur = 5000 #millis，确保block模块能够接收到confirm的块数据

    block {
      #投票选举重试间隔
      vote_retry_delay = 200
      #投票重试无果后等待时间
      #waiting_delay = 3600000
      waiting_delay = 360
    }

    #超时策略：1,手动；0，自动
    timeout_policy_type = 1

    timeout {
      #Unit : Second 以下的超时时间一般采用默认配置
      #For auto 自动采用的超时时间
      #base_preload = 30#交易预执行的超时时间，单位是s
      #base_vote = 20#内部消息传递速度快，抽签的超时时间
      #base_sync = 20#没有耗时操作，没有大块传输的情况下
      #base_addition = 0#冗余量，不用配置

      #For config manually 手工设置超时时间，系统主动采用手工设置的时间，可以不用设置
      block = 90#出块的超时时间
      endorse = 4#背书超时时间，单位为秒
      endorse_resend_times = 3#背书失败的次数，超过该次数就等待出块超时
      transaction_preload = 2
      sync_chain = 15#链同步的超时时间
      transcation_waiting = 900#交易在交易池中等待入块到的超时时间，单位是秒
      node_restart_for_unreachable_time = 600 #节点离网超过该时间就会重启
    }
  }

  consensus {
    #共识类型，目前只支持一种
    type = "RAFT"//内置三种共识协议，CFRD、RAFT、PBFT
    synch_type="RAFT"//内置两种同步类型，CFRD最高的高度的节点数大于一半；RAFT按照最高高度进行同步
    blocknumberofraft = 200
  }

}