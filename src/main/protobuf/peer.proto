/*
copyright (C) 2018 by repChain 

*/


syntax = "proto3";

option java_package = "rep.protos";
import "google/protobuf/timestamp.proto";

/*
*/
//Event 用于图形展示的事件
message Event {
    //来源addr
    string from = 1;
    //发送addr，如果是广播（需要定义一个）
    string to = 2;
    //event事件
    enum Action {
        SUBSCRIBE_TOPIC = 0;
        TRANSACTION = 1;
        BLOCK_NEW = 2;
        BLOCK_ENDORSEMENT = 3;
        ENDORSEMENT = 4;
        MEMBER_UP = 5;
        MEMBER_DOWN = 6;
        CANDIDATOR = 7;
        GENESIS_BLOCK = 8;
        BLOCK_SYNC = 9;
        BLOCK_SYNC_DATA = 10;
        BLOCK_SYNC_SUC = 11;
    }
    Action action = 3;
    Block blk = 4;
}

//账户
message Signer{ 
    string name = 1;    //姓名或机构名, 用于填充合约文本
    string credit_code = 2; //社会信用代码, 与个人或机构唯一绑定
    string mobile = 3;  // 手机号码,用于接收通知
    repeated Certificate certs = 4; //签名者证书标识，可用于下载证书
}

//账户证书标示
message certId {
    string credit_code = 1;
    string name = 2;
}

//账户证书标示
message Certificate {
    certId  cert_id= 1;
    string certificate = 2; //内含签发机构
    enum Alg_type {
    CODE_UNDEFINED = 0; //TODO
        CODE_JAVASCRIPT = 1;
        CODE_SCALA = 2;
    }
    Alg_type alg = 6;
    
}

//背书，可用于Transaction和Block
message Signature {
    //证书标识
    certId cert_id = 1;
    google.protobuf.Timestamp tm_local = 2; //签名时间
    //签名
     bytes signature = 3;     
}

//合约方法调用及实际参数
message ChaincodeInput {
    string function = 1;
    repeated string args  = 2;
}
//指定合约名称和版本,确定唯一的合约代码
message chaincodeID {
    string chaincodeName = 1;
    int32 version = 2;
}
// 合约定义,部署/升级
message ChaincodeDeploy {
	//Type only support javascript 
    int32 timeout = 3;
    //完整的代码内容
    string code_package = 4;
    //合约规则的法律描述文本
    string legal_prose =5;
    enum CodeType {
	CODE_UNDEFINED = 0;
        CODE_JAVASCRIPT = 1;
        CODE_SCALA = 2;
    }
    CodeType ctype = 6;
} 

/*
* 交易
*/
message Transaction {
    string id = 1;
    enum Type {
        UNDEFINED = 0;
        // deploy a chaincode to the network and call `Init` function
        CHAINCODE_DEPLOY = 1;
        // call a chaincode `Invoke` function as a transaction
        CHAINCODE_INVOKE = 2;
        CHAINCODE_SET_STATE = 3;
    }
    Type type = 2;
    //store ChaincodeID as bytes so its encrypted value can be stored
    chaincodeID cid = 3;
    oneof para {
        ChaincodeDeploy spec = 4;
        ChaincodeInput ipt = 5; 
        bool state = 6;
    }
    Signature signature = 7;
}

message Block {
    // version - 区块数据版本,以便数据格式升级
    uint32 version = 1;
    // 区块高度, 从1开始
    uint64 height = 2;
    //顺序排列的交易
    repeated Transaction transactions = 3;
    //交易执行日志及输出指令
    repeated TransactionResult transactionResults = 4;
    //输出指令集合hash
    bytes operHash = 5;
    // previousBlockHash - The hash of the previous block in the chain.
    bytes previousBlockHash = 6;
    //背书签名集合,必须包含出块人签名
    repeated Signature endorsements=7;
}

//交易执行增量日志
message OperLog{
	string key =1;
	bytes oldValue =2;
	bytes newValue=3;
}
//交易结果(背书中针对各个交易再进行单独背书)
//背书请求的应答（针对block中的各个交易）
message TransactionResult {
    //唯一标识一个Transaction
  string txId = 1;
    // result - The return value of the transaction.
  repeated OperLog ol = 2;
    // errorCode - An error code. 5xx will be logged as a failure in the dashboard.
  uint32 errorCode = 3;
    // error - An error string for logging an issue.
  string error = 4;
}


message BlockchainInfo {
    uint64 height = 1;
    uint64 totalTransactions = 2;
    bytes  currentBlockHash = 3;
    bytes  previousBlockHash = 4;
    bytes  currentWorldStateHash = 5;
}

